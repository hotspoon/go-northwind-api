definitions:
  models.Category:
    properties:
      category_id:
        description: INTEGER, Auto Increment
        type: integer
      category_name:
        description: TEXT, nullable
        type: string
      description:
        description: TEXT, nullable
        type: string
      picture:
        description: BLOB, nullable
        items:
          type: integer
        type: array
    type: object
  models.Customer:
    properties:
      address:
        type: string
      city:
        type: string
      company_name:
        type: string
      contact_name:
        type: string
      contact_title:
        type: string
      country:
        type: string
      customer_id:
        type: string
      fax:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      region:
        type: string
    type: object
  models.Employee:
    properties:
      address:
        type: string
      birth_date:
        type: string
      city:
        type: string
      country:
        type: string
      employee_id:
        type: integer
      extension:
        type: string
      first_name:
        type: string
      hire_date:
        type: string
      home_phone:
        type: string
      last_name:
        type: string
      notes:
        type: string
      photo:
        items:
          type: integer
        type: array
      photo_path:
        type: string
      postal_code:
        type: string
      region:
        type: string
      reports_to:
        type: integer
      title:
        type: string
      title_of_courtesy:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Order:
    properties:
      customer_id:
        description: TEXT, nullable
        type: string
      employee_id:
        description: INTEGER, nullable
        type: integer
      freight:
        description: NUMERIC, nullable (default 0)
        type: number
      order_date:
        description: DATETIME, nullable (use *time.Time if you want time type)
        type: string
      order_id:
        description: INTEGER, PK, Auto Increment, Not Null
        type: integer
      required_date:
        description: DATETIME, nullable
        type: string
      ship_address:
        description: TEXT, nullable
        type: string
      ship_city:
        description: TEXT, nullable
        type: string
      ship_country:
        description: TEXT, nullable
        type: string
      ship_name:
        description: TEXT, nullable
        type: string
      ship_postal_code:
        description: TEXT, nullable
        type: string
      ship_region:
        description: TEXT, nullable
        type: string
      ship_via:
        description: INTEGER, nullable
        type: integer
      shipped_date:
        description: DATETIME, nullable
        type: string
    type: object
  models.OrderDetail:
    properties:
      discount:
        description: REAL, Not Null (default 0)
        type: number
      order_id:
        description: INTEGER, Not Null
        type: integer
      product_id:
        description: INTEGER, Not Null
        type: integer
      quantity:
        description: INTEGER, Not Null (default 1)
        type: integer
      unit_price:
        description: NUMERIC, Not Null (default 0)
        type: number
    type: object
  models.Paginated-models_Order:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      items:
        items:
          $ref: '#/definitions/models.Order'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  models.Product:
    properties:
      category_id:
        type: integer
      discontinued:
        type: string
      product_id:
        type: integer
      product_name:
        type: string
      quantity_per_unit:
        type: string
      reorder_level:
        type: integer
      supplier_id:
        type: integer
      unit_price:
        type: number
      units_in_stock:
        type: integer
      units_on_order:
        type: integer
    type: object
  models.ProductCategory:
    properties:
      category_id:
        type: integer
      category_name:
        type: string
    type: object
  models.ProductSupplier:
    properties:
      company_name:
        type: string
      supplier_id:
        type: integer
    type: object
  models.Region:
    properties:
      region_description:
        type: string
      region_id:
        type: integer
    type: object
  models.Shipper:
    properties:
      company_name:
        type: string
      phone:
        type: string
      shipper_id:
        type: integer
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.Supplier:
    properties:
      address:
        type: string
      city:
        type: string
      company_name:
        type: string
      contact_name:
        type: string
      contact_title:
        type: string
      country:
        type: string
      fax:
        type: string
      homepage:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      region:
        type: string
      supplier_id:
        type: integer
    type: object
info:
  contact: {}
  description: RESTful API for Northwind database
  title: Northwind API
  version: "1.0"
paths:
  /api/v1/categories:
    get:
      description: Returns a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Creates a new category
      parameters:
      - description: Category to create
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Categories
  /api/v1/categories/{id}:
    delete:
      description: Deletes a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - Categories
    get:
      description: Returns a single category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Updates an existing category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category to update
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - Categories
  /api/v1/customers:
    get:
      description: Returns a list of all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Customer'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Creates a new customer
      parameters:
      - description: Customer to create
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Customer'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new customer
      tags:
      - Customers
  /api/v1/customers/{id}:
    delete:
      description: Deletes a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a customer
      tags:
      - Customers
    get:
      description: Returns a single customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get customer by ID
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Updates an existing customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer to update
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing customer
      tags:
      - Customers
  /api/v1/employees:
    get:
      description: Returns a list of all employees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Employee'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all employees
      tags:
      - Employees
    post:
      consumes:
      - application/json
      description: Creates a new employee
      parameters:
      - description: Employee to create
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Employee'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new employee
      tags:
      - Employees
  /api/v1/employees/{id}:
    delete:
      description: Deletes an employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an employee
      tags:
      - Employees
    get:
      description: Returns a single employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get employee by ID
      tags:
      - Employees
    put:
      consumes:
      - application/json
      description: Updates an existing employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Employee to update
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an employee
      tags:
      - Employees
  /api/v1/orders:
    get:
      description: Returns a list of all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Creates a new order
      parameters:
      - description: Order to create
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Orders
  /api/v1/orders/{id}:
    delete:
      description: Deletes an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an order
      tags:
      - Orders
    get:
      description: Returns a single order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - Orders
    put:
      consumes:
      - application/json
      description: Updates an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order to update
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an order
      tags:
      - Orders
  /api/v1/orders/{id}/details:
    get:
      description: Returns order details for a specific order by Order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OrderDetail'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order details by Order ID
      tags:
      - Orders
  /api/v1/orders/paginated:
    get:
      description: Returns a paginated list of orders
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Paginated-models_Order'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get paginated orders
      tags:
      - Orders
  /api/v1/products:
    get:
      description: Returns a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: Product to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /api/v1/products/{id}:
    delete:
      description: Deletes a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Returns a single product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Updates an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
  /api/v1/products/{id}/category:
    get:
      description: Returns the category for a given product ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductCategory'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get category for a product
      tags:
      - Products
  /api/v1/products/{id}/supplier:
    get:
      description: Returns the supplier for a given product ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductSupplier'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get supplier for a product
      tags:
      - Products
  /api/v1/regions:
    get:
      description: Returns a list of all regions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Region'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all regions
      tags:
      - Regions
  /api/v1/regions/{id}:
    get:
      description: Returns a single region by ID
      parameters:
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Region'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get region by ID
      tags:
      - Regions
  /api/v1/shippers:
    get:
      description: Returns a list of all shippers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Shipper'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all shippers
      tags:
      - Shippers
    post:
      consumes:
      - application/json
      description: Creates a new shipper
      parameters:
      - description: Shipper to create
        in: body
        name: shipper
        required: true
        schema:
          $ref: '#/definitions/models.Shipper'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Shipper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new shipper
      tags:
      - Shippers
  /api/v1/shippers/{id}:
    delete:
      description: Deletes a shipper by ID
      parameters:
      - description: Shipper ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a shipper
      tags:
      - Shippers
    get:
      description: Returns a single shipper by ID
      parameters:
      - description: Shipper ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Shipper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get shipper by ID
      tags:
      - Shippers
    put:
      consumes:
      - application/json
      description: Updates an existing shipper by ID
      parameters:
      - description: Shipper ID
        in: path
        name: id
        required: true
        type: integer
      - description: Shipper data to update
        in: body
        name: shipper
        required: true
        schema:
          $ref: '#/definitions/models.Shipper'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Shipper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing shipper
      tags:
      - Shippers
  /api/v1/suppliers:
    get:
      description: Returns a list of all suppliers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Supplier'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all suppliers
      tags:
      - Suppliers
    post:
      consumes:
      - application/json
      description: Creates a new supplier
      parameters:
      - description: Supplier to create
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.Supplier'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new supplier
      tags:
      - Suppliers
  /api/v1/suppliers/{id}:
    delete:
      description: Deletes a supplier by ID
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a supplier
      tags:
      - Suppliers
    get:
      description: Returns a single supplier by ID
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Supplier'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get supplier by ID
      tags:
      - Suppliers
    put:
      consumes:
      - application/json
      description: Updates an existing supplier
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      - description: Supplier to update
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.Supplier'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a supplier
      tags:
      - Suppliers
  /api/v1/territories/{id}/employees:
    get:
      description: Returns a list of employees associated with a specific territory
        ID
      parameters:
      - description: Territory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Employee'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get employees by territory ID
      tags:
      - Regions
swagger: "2.0"
